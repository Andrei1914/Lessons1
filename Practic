#2023/10/05 00:00|Домашняя работа по уроку "Способы вызова функции"
message = str(input("Введите текст письма: "))
recipient = str(input("Введите вашу почту: "))
valid_recipient = recipient.endswith(('.com', '.net', '.ru')) and '@' in recipient
def send_email(message, recipient, sender = "university.help@gmail.com"):

        if valid_recipient:
            if sender == recipient:
                print("Нельзя отправить письмо самому себе!")
            else:
                print('Письмо отправлено')
        else:
            print(f"Невозможно отправить письмо с {sender} на {recipient}!")

2023/10/31 00:00|Домашняя работа по уроку "Перегрузка операторов."
class House:
    def __init__(self, name, number_of_floors):
        self.name = name
        self.number_of_floors = number_of_floors

    def home(self):
        return f'{self.name}, этажей: {self.number_of_floors}'

    def __eq__(self, other):
        return f'{self.name}, этажей: {self.number_of_floors}, == , {other.name}, этажей: {other.number_of_floors}, {self.number_of_floors == other.number_of_floors}'

    def __lt__(self, other):
        return f'{self.name}, этажей: {self.number_of_floors}, < , {other.name}, этажей: {other.number_of_floors}, {self.number_of_floors < other.number_of_floors}'

    def __le__(self, other):
        return f'{self.name}, этажей: {self.number_of_floors}, <= , {other.name}, этажей: {other.number_of_floors}, {self.number_of_floors <= other.number_of_floors}'

    def __gt__(self, other):
        return f'{self.name}, этажей: {self.number_of_floors}, > , {other.name}, этажей: {other.number_of_floors}, {self.number_of_floors > other.number_of_floors}'

    def __ge__(self, other):
        return f'{self.name}, этажей: {self.number_of_floors}, >= , {other.name}, этажей: {other.number_of_floors}, {self.number_of_floors >= other.number_of_floors}'

    def __ne__(self, other):
        return f'{self.name}, этажей: {self.number_of_floors}, != , {other.name}, этажей: {other.number_of_floors}, {self.number_of_floors != other.number_of_floors}'

    def __add__(self, value):
        self.number_of_floors += value
        return home_1.home()



home_1 = House('ЖК Развитие', 20)

home_2 = House('ЖК Отрадное', 30)

print(home_1.home())
print(home_1.__add__(10))
print(home_1 == home_2)
print(home_1 <= home_2)
print(home_1 >= home_2)
print(home_1 > home_2)
print(home_1 < home_2)
print(home_1 != home_2)
2023/11/02 00:00|Домашняя работа по уроку "Различие атрибутов класса и экземпляра."

class House:
    houses_history = []

    def __new__(cls, *args, **kwargs):
        cls.houses_history.append(args[0])
        return super().__new__(cls)

    def __init__(self, name, floors):
        self.name = name
        self.floors = floors

    def __del__(self):
        print(f'{self.name} снесён, но он останется в истории')

h1 = House('ЖК Озерки', 10)
h2 = House('ЖК Боровое', 20)
h3 = House('ЖК Олимпийский', 20)
print(House.houses_history)
del h1, h2
print(House.houses_history)

2023/11/07 00:00|Домашнее задание по теме "Зачем нужно наследование"
class Animal:
    alive = True
    fed = False
    def __init__(self, name):
        self.name = name

class Plant:
    edible = False
    def __init__(self, name):
        self.name = name

class Mammal(Animal):
    def eat(self, food):
        if food.edible:
            print(f'{self.name} съел {food.name}')
            self.fed = True
        else:
            print(f'{self.name} не стал есть {food.name}')
            self.alive = False
class Predator(Animal):

    def eat(self, food):
        if food.edible:
            print(f'{self.name} съел {food.name}')
            self.fed = True
        else:
            print(f'{self.name} не стал есть {food.name}')
            self.alive = False

class Flower(Plant):
    pass

class Fruit(Plant):
    edible = True



a1 = Predator('Leon')
a2 = Mammal('Cat')
p1 = Plant('Flowers')
p2 = Fruit('Banana')

print(a1.name)
print(p1.name)

print(a1.alive)
print(a2.fed)

a1.eat(p1)
a2.eat(p2)
print(a1.alive)
print(a2.fed)
