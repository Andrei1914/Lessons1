2023/09/29 00:00|Домашняя работа по уроку "Стиль кода часть II. Цикл While."
my_list = [42, 69, 322, 13, 0, 99, -5, 9, 8, 7, -6, 5]
i = 0

while i < len(my_list):
    num = my_list[i]
    i += 1
    if num == 0:
        continue
    elif num < 0:
        break
    else:
        print(num)
# Домашняя работа по уроку "Цикл for. Элементы списка. Полезные функции в цикле"
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
primes = []
not_primes = []
i = 0
for i in numbers:
    is_prime = True
    if i < 2:   # не 0 и не 1
        print(i, '- не простое и не сложное число')
        continue
    else:
        f = i ** (1 / 2)  # Корень квадратный из n
    for a in range(2, int(f + 1)):
        if i % a == 0:
            is_prime = False
            break
    if not (is_prime):
        not_primes.append(i)
    else:
        primes.append(i)
is_prime = True  # признак простого числа
print('Простые числа ', primes)
print('Составные числа', not_primes)


#2023/10/05 00:00|Домашняя работа по уроку "Способы вызова функции"
message = str(input("Введите текст письма: "))
recipient = str(input("Введите вашу почту: "))
valid_recipient = recipient.endswith(('.com', '.net', '.ru')) and '@' in recipient
def send_email(message, recipient, sender = "university.help@gmail.com"):

        if valid_recipient:
            if sender == recipient:
                print("Нельзя отправить письмо самому себе!")
            else:
                print('Письмо отправлено')
        else:
            print(f"Невозможно отправить письмо с {sender} на {recipient}!")

#2023/10/07 00:00|Самостоятельная работа по уроку "Распаковка позиционных параметров".
values_list_1 = [8.12, 'Russia', True]
values_dict_1 = (15, 'Voronezh', False)
values_list_2 = [12.21, "Moscow"]
def print_params(a = 1.23, b = ['Andrey', 'Denis', 'Artur'], c = True):
    print(a, b, c)

print_params()
print_params(1.2, ['Valeria', 'Angelina'], False)
print_params(1.5)
print_params(*values_list_1)
print_params(*values_dict_1)
print_params(*values_list_2, c=True)

#2023/10/08 00:00|Самостоятельная работа по уроку "Произвольное число параметров".

def single_root_words(root_word, *other_words):
    same_words = []
    for i in other_words:
        if root_word.lower() in i.lower() or i.lower() in root_word.lower():
            same_words.append(i)

    print(same_words)

other_words = ('rich', 'richiest', 'orichalcum', 'cheers', 'richies')
single_root_words('rich', *other_words)

def get_multiplied_digits(number):
    str_number = str(number)
    first = int(str_number[0])
    n = 0
    i = 0
    for i in str_number:
        if str_number.endswith('0'):
            str_number = str_number[:len(str_number)-1]
        elif len(str_number) > 1:
            return first * get_multiplied_digits(int(str_number[1:]))
        else:
            return first

num = input("Введите число: ")
print(get_multiplied_digits(num))

other_words = ('rich', 'richiest', 'orichalcum', 'cheers', 'richies')
single_root_words('rich', *other_words)

2023/10/29 00:00|Домашняя работа по уроку "Атрибуты и методы объекта."
class House:
    def __init__(self, name, number_of_floors):
        self.name = name
        self.number_of_floors = number_of_floors
    def go_to(self, new_floor):
        i = 0
        self.new_floor = new_floor
        for i in range(self.new_floor):
            i += 1
            print(f'Здание: {self.name}, этаж: {i}')
            if i >= self.number_of_floors:
                print('Такого этажа не существует!')
                break

h1 = House('ЖК Эльбрус', 4)

2023/10/30 00:00|Домашняя работа по уроку "Специальные методы классов"
class House:
    def __init__(self, name, number_of_floors):
        self.name = name
        self.number_of_floors = number_of_floors
    def __str__(self):
        return f'Название: {self.name},  кол-во этажей: {self.number_of_floors}'

    def __len__(self):
        return self.number_of_floors

h1 = House('ЖК Эльбрус', 4)

print(h1.__str__())
print(h1.__len__())

2023/10/31 00:00|Домашняя работа по уроку "Перегрузка операторов."
class House:
    def __init__(self, name, number_of_floors):
        self.name = name
        self.number_of_floors = number_of_floors

    def home(self):
        return f'{self.name}, этажей: {self.number_of_floors}'

    def __eq__(self, other):
        return f'{self.name}, этажей: {self.number_of_floors}, == , {other.name}, этажей: {other.number_of_floors}, {self.number_of_floors == other.number_of_floors}'

    def __lt__(self, other):
        return f'{self.name}, этажей: {self.number_of_floors}, < , {other.name}, этажей: {other.number_of_floors}, {self.number_of_floors < other.number_of_floors}'

    def __le__(self, other):
        return f'{self.name}, этажей: {self.number_of_floors}, <= , {other.name}, этажей: {other.number_of_floors}, {self.number_of_floors <= other.number_of_floors}'

    def __gt__(self, other):
        return f'{self.name}, этажей: {self.number_of_floors}, > , {other.name}, этажей: {other.number_of_floors}, {self.number_of_floors > other.number_of_floors}'

    def __ge__(self, other):
        return f'{self.name}, этажей: {self.number_of_floors}, >= , {other.name}, этажей: {other.number_of_floors}, {self.number_of_floors >= other.number_of_floors}'

    def __ne__(self, other):
        return f'{self.name}, этажей: {self.number_of_floors}, != , {other.name}, этажей: {other.number_of_floors}, {self.number_of_floors != other.number_of_floors}'

    def __add__(self, value):
        self.number_of_floors += value
        return home_1.home()



home_1 = House('ЖК Развитие', 20)

home_2 = House('ЖК Отрадное', 30)

print(home_1.home())
print(home_1.__add__(10))
print(home_1 == home_2)
print(home_1 <= home_2)
print(home_1 >= home_2)
print(home_1 > home_2)
print(home_1 < home_2)
print(home_1 != home_2)
